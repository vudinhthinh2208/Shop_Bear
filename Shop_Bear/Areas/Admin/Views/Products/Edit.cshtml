@model Shop_Bear.Models.EF.Product
@{
	ViewData["title"] = "Sửa sản phẩm";
}
@section naviheader{
	<!-- Left navbar links -->
	<ul class="navbar-nav">
		<li class="nav-item">
			<a class="nav-link" data-widget="pushmenu" href="#" role="button"><i class="fas fa-bars"></i></a>
		</li>
		<li class="nav-item d-none d-sm-inline-block">
			<a asp-controller="Home" asp-action="Index" class="nav-link">Home</a>
		</li>
		<li class="nav-item d-none d-sm-inline-block">
			<a asp-controller="Products" asp-action="Index" class="nav-link">Sản phẩm</a>
		</li>
		<li class="nav-item d-none d-sm-inline-block">
			<a asp-controller="Products" asp-action="Add" class="nav-link">Sửa sản phẩm</a>
		</li>
	</ul>
}
<!-- Content Header (Page header) -->
<section class="content-header">
	<div class="container-fluid">
		<div class="row mb-2">
			<div class="col-sm-6">
				<h1>Cập nhật sản phẩm</h1>
			</div>
			<div class="col-sm-6">
				<ol class="breadcrumb float-sm-right">
					<li class="breadcrumb-item"><a href="#">Sản Phẩm</a></li>
					<li class="breadcrumb-item active">Cập nhật</li>
				</ol>
			</div>
		</div>
	</div><!-- /.container-fluid -->
</section>

<!-- Main content -->
<section class="content">
	<!-- Default box -->
	<div class="card">
		<div class="card-header">
			<h3 class="card-title">Thông Tin </h3>
		</div>
		<div class="card-body">
			<div row>
				<div class="col-md-12">
					@using (Html.BeginForm("Edit", "Products", FormMethod.Post, new { }))
					{
						@Html.AntiForgeryToken()
						@Html.ValidationSummary(true)
						@Html.HiddenFor(x => x.Id)
						@Html.HiddenFor(x => x.CreateDate)
						<div class="card">
							<div class="card-header p-2">
								<ul class="nav nav-pills">
									<li class="nav-item"><a class="nav-link active" href="#activity" data-toggle="tab">Thông tin chung</a></li>
								</ul>
							</div><!-- /.card-header -->
							<!-- your steps content here -->
							<div class="card-body">
								<div class="tab-content">
									<div class="active tab-pane" id="activity">
										<div class="form-group">
											<label for="exampleInputEmail1">Tên Sản Phẩm</label>
											@Html.TextBoxFor(x => x.Title, new { @class = "form-control", @placeholder = "Tên sản phẩm" })
											@Html.ValidationMessageFor(x => x.Title, null, new { @class = "text-danger" })
										</div>
										<div class="form-group">
											<label for="exampleInputFile">Hình ảnh</label>
											<div class="input-group">
												<div class="custom-file">
													@Html.TextBoxFor(x => x.ProductImage, new { @id = "txtImage", @class = "form-control" })
												</div>
												<div class="input-group-append">
													<input type="button" value="Tải ảnh" onclick="BrowseServer('txtImage');" />
												</div>
											</div>
										</div>
										<div class="form-group">
											<label for="exampleInputEmail1">Alias</label>
											@Html.TextBoxFor(x => x.Alias, new { @class = "form-control", @placeholder = "Alias" })
											@Html.ValidationMessageFor(x => x.Alias, null, new { @class = "text-danger" })
										</div>
										<div class="form-group">
											<label for="exampleInputEmail1">SKU</label>
											@Html.TextBoxFor(x => x.Code, new { @class = "form-control", @placeholder = "Mã sản phẩm" })
											@Html.ValidationMessageFor(x => x.Code, null, new { @class = "text-danger" })
										</div>
										<div class="form-group">
											<label asp-for="ProductCategoryId" class="control-label"></label>
											<select asp-for="ProductCategoryId" class="form-control" asp-items="@ViewBag.ProductCategory">
												<option value="">-- Select Product Category --</option>
											</select>
										</div>
										<div class="form-group">
											<label for="exampleInputEmail1">Mô tả</label>
											@Html.TextAreaFor(x => x.Description, new { @class = "form-control", @placeholder = "Mô tả sản phẩm" })
											@Html.ValidationMessageFor(x => x.Description, null, new { @class = "text-danger" })
										</div><div class="form-group">
											<label for="exampleInputEmail1">Chi tiết sản phẩm</label>
											@Html.TextAreaFor(x => x.Detail, new { @class = "form-control", @id="txtDetail" })
											@Html.ValidationMessageFor(x => x.Detail, null, new { @class = "text-danger" })
										</div>
										<div class="row">
											<div class="col-3">
												<div class="form-group">
													<label for="exampleInputEmail1">Số lượng</label>
													@Html.TextBoxFor(x => x.Quantity, new { @class = "form-control",@value = "1"})
													@Html.ValidationMessageFor(x => x.Quantity, null, new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-3">
												<div class="form-group">
													<label for="exampleInputEmail1">Giá gốc</label>
													@Html.TextBoxFor(x => x.OriginalPrice, new { @class = "form-control", @placeholder = "Giá" })
													@Html.ValidationMessageFor(x => x.OriginalPrice, null, new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-3">
												<div class="form-group">
													<label for="exampleInputEmail1">Giá</label>
													@Html.TextBoxFor(x => x.Price, new { @class = "form-control", @placeholder = "Giá" })
													@Html.ValidationMessageFor(x => x.Price, null, new { @class = "text-danger" })
												</div>
											</div>
											<div class="col-3">
												<div class="form-group">
													<label for="exampleInputEmail1">Giá khuyến mại</label>
													@Html.TextBoxFor(x => x.PriceSale, new { @class = "form-control", @placeholder = "Giá khuyến mại" })
													@Html.ValidationMessageFor(x => x.PriceSale, null, new { @class = "text-danger" })
												</div>
											</div>
										</div>
										<div class="row">
											<div class="col-4">
												<div class="form-group">
													<div class="custom-control custom-checkbox">
														@Html.CheckBoxFor(x => x.IsActive, new { @class = "custom-control-input", @id = "customCheckbox2", @checked = "checked" })
														<label for="customCheckbox2" class="custom-control-label">Trạng thái</label>
													</div>
												</div>
											</div>
											<div class="col-4">
												<div class="form-group">
													<div class="custom-control custom-checkbox">
														@Html.CheckBoxFor(x => x.IsHot, new { @class = "custom-control-input", @id = "IsHotCheckbox2" })
														<label for="IsHotCheckbox2" class="custom-control-label">Hot</label>
													</div>
												</div>
											</div>
											<div class="col-4">
												<div class="form-group">
													<div class="custom-control custom-checkbox">
														@Html.CheckBoxFor(x => x.IsFeature, new { @class = "custom-control-input", @id = "IsFeatureCheckbox" })
														<label for="IsFeatureCheckbox" class="custom-control-label">Nổi bật</label>
													</div>
												</div>
											</div>
											<div class="col-4">
												<div class="form-group">
													<div class="custom-control custom-checkbox">
														@Html.CheckBoxFor(x => x.IsSale, new { @class = "custom-control-input", @id = "IsSaleCheckbox" })
														<label for="IsSaleCheckbox" class="custom-control-label">Khuyến mãi</label>
													</div>
												</div>
											</div>
											<div class="col-4">
												<div class="form-group">
													<div class="custom-control custom-checkbox">
														@Html.CheckBoxFor(x => x.IsHome, new { @class = "custom-control-input", @id = "IsHomeCheckbox" })
														<label for="IsHomeCheckbox" class="custom-control-label">Hiển thị</label>
													</div>
												</div>
											</div>
										</div>

										<div class="form-group row">
											<label for="inputName" class="col-sm-2 col-form-label">SeoTitle</label>
											<div class="col-sm-10">
												@Html.TextBoxFor(x => x.SeoTitle, new { @class = "form-control", @placeholder = "SeoTitle" })
												@Html.ValidationMessageFor(x => x.SeoTitle, null, new { @class = "text-danger" })
											</div>
										</div>
										<div class="form-group row">
											<label for="inputEmail" class="col-sm-2 col-form-label">SeoKeywords</label>
											<div class="col-sm-10">
												@Html.TextBoxFor(x => x.SeoKeywords, new { @class = "form-control", @placeholder = "SeoKeywords" })
												@Html.ValidationMessageFor(x => x.SeoKeywords, null, new { @class = "text-danger" })
											</div>
										</div>
										<div class="form-group row">
											<label for="inputName2" class="col-sm-2 col-form-label">SeoDescription</label>
											<div class="col-sm-10">
												@Html.TextBoxFor(x => x.SeoDescription, new { @class = "form-control", @placeholder = "SeoDescription" })
												@Html.ValidationMessageFor(x => x.SeoDescription, null, new { @class = "text-danger" })
											</div>
										</div>

									</div>

								</div>
								<div class="form-group">
									<a asp-controller="Products" asp-action="Index" class="btn btn-danger">Quay lại</a>
									<button type="submit" class="btn btn-primary">Submit</button>
								</div>
							</div>

						</div>
					}

				</div>
			</div>
		</div>
		<!-- /.card-body -->
		<div class="card-footer">
		</div>
		<!-- /.card-footer-->
	</div>
	<!-- /.card -->
</section>
<!-- /.content -->
@section Scripts {
	@{

		await Html.RenderPartialAsync("_ValidationScriptsPartial");
		<script>
			$(document).ready(function () {
				// Sự kiện khi giá thay đổi
				$('#Price').on('input', function () {
					// Lấy giá trị nhập vào
					var priceInput = $(this).val();

					// Xử lý định dạng giá
					var formattedPrice = formatPrice(priceInput);

					// Gán giá trị đã định dạng vào trường nhập
					$(this).val(formattedPrice);
				});

				// Hàm định dạng giá
				function formatPrice(price) {
					// Loại bỏ tất cả các ký tự không phải số
					var numericPrice = price.replace(/[^0-9]/g, '');

					// Định dạng giá theo hàng trăm hàng nghìn
					var formattedPrice = numericPrice.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

					return formattedPrice;
				}
				$('#PriceSale').on('input', function () {
					// Lấy giá trị nhập vào
					var priceInput = $(this).val();

					// Xử lý định dạng giá
					var formattedPrice = formatPrice(priceInput);

					// Gán giá trị đã định dạng vào trường nhập
					$(this).val(formattedPrice);
				});

				// Hàm định dạng giảm giá
				function formatPrice(price) {
					// Loại bỏ tất cả các ký tự không phải số
					var numericPrice = price.replace(/[^0-9]/g, '');

					// Định dạng giá theo hàng trăm hàng nghìn
					var formattedPrice = numericPrice.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

					return formattedPrice;
				}
				$('#OriginalPrice').on('input', function () {
					// Lấy giá trị nhập vào
					var priceInput = $(this).val();

					// Xử lý định dạng giá
					var formattedPrice = formatPrice(priceInput);

					// Gán giá trị đã định dạng vào trường nhập
					$(this).val(formattedPrice);
				});

				// Hàm định dạng giá gốc
				function formatPrice(price) {
					// Loại bỏ tất cả các ký tự không phải số
					var numericPrice = price.replace(/[^0-9]/g, '');

					// Định dạng giá theo hàng trăm hàng nghìn
					var formattedPrice = numericPrice.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

					return formattedPrice;
				}
			});
		</script>

		<script>
			ClassicEditor
				.create(document.querySelector('#editor'), {
					ckfinder: {
						uploadUrl: '/ckfinder/core/connector/aspx?command=QuickUpload&type=Files&responseType=json'
					},
					toolbar: ['ckfinder', 'imageUpload', '|', 'heading', '|', 'bold', 'italic', '|', 'undo', 'redo']
				})
				.then(editor => {
					console.log('Editor was initialized', editor);
				})
				.catch(error => {
					console.error(error.stack);
				});
		</script>
		<script>
			function BrowseServer(field) {
				CKFinder.modal({
					chooseFiles: true,
					width: 800,
					height: 600,
					onInit: function (finder) {
						finder.on('files:choose', function (evt) {
							var file = evt.data.files.first();
							document.getElementById(field).value = file.getUrl();
						});

						finder.on('file:choose:resizedImage', function (evt) {
							var file = evt.data.resizedUrl;
							document.getElementById(field).value = file;
						});
					}
				});
			}
		</script>
		<script>
			function BrowseServer() {
				CKFinder.modal({
					chooseFiles: true,
					width: 800,
					height: 600,
					onInit: function (finder) {
						finder.on('files:choose', function (evt) {
							var file = evt.data.files.first();
							addImageProduct(file.getUrl());
						});

						finder.on('file:choose:resizedImage', function (evt) {
							var file = evt.data.resizedUrl;
							addImageProduct(file);
						});
					}
				});
			}

			function addImageProduct(url) {
				var temp = $('#tCurrentId').val();
				var currentId = parseInt(temp) + 1;
				var str = "";
				if (currentId == 1) {
					str += `<tr id="trow_${currentId}">
																					<td class="text-center">${currentId}</td>
																					<td class="text-center"><img width="80" src="${url}" /> <input type='hidden' value="${url}" name="Images"/></td>
																					<td class="text-center"><input type="radio" name="rDefault" value="${currentId}" checked="checked"/></td>
																					<td class="text-center"><a href="#" data-id="${currentId}" class="btn btn-sm btn-danger btnXoaAnh">Xóa</a></td>
																					</tr>`;
				}
				else {
					str += `<tr id="trow_${currentId}">
																					<td class="text-center">${currentId}</td>
																					<td class="text-center"><img width="80" src="${url}" /> <input type='hidden' value="${url}" name="Images"/></td>
																					<td class="text-center"><input type="radio" name="rDefault" value="${currentId}"/></td>
																					<td class="text-center"><a href="#" data-id="${currentId}" class="btn btn-sm btn-danger btnXoaAnh">Xóa</a></td>
																					</tr>`;
				}
				$('#tbHtml').append(str);
				$('#tCurrentId').val(currentId);

			}
		</script>

	}
    }
